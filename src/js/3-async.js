async function getFruit(name) {
  const fruits = {
    strawberry: 'üçì',
    kiwi: 'ü•ù',
    apple: 'üçé',
  };
  //   return Promise.resolve(fruits[name]);
  return new Promise(resolve => {
    setTimeout(() => {
      resolve(fruits[name]);
    }, 500);
  });
}

// –Ω–∞–¥–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - —Å–Ω–∞—á–∞–ª–∞ —è–±–ª–æ–∫–æ, –∑–∞—Ç–µ–º –∫–∏–≤–∏
// —Ç–∞–∫–æ–π –∫–æ–¥ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —ë–ª–∫—É - promise hell
function makeSmoothie() {
  getFruit('apple').then(fruit => {
    console.log(fruit);
    getFruit('kiwi').then(fruit => console.log(fruit));
  });
}
// makeSmoothie();

// –ø–µ—Ä–µ–ø–∏—à–µ–º –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É—è async/await:
// —ç—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥
async function asyncMakeSmoothie() {
  console.time('asyncMakeSmoothie');
  // –ø–æ–¥–æ–∂–¥–∏ –ø–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø—Ä–æ–º–∏—Å –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∑–∞–ø–∏—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Ä–º–∏—Å–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
  const apple = await getFruit('apple'); // –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∏ –∂–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–º–∏—Å–∞, –≤ —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –Ω–µ –∑–∞–≤–∏—Å–∞–µ—Ç
  console.log(apple);
  const kiwi = await getFruit('kiwi');
  console.log(kiwi);
  console.timeEnd('asyncMakeSmoothie');
}
// asyncMakeSmoothie();

// "–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π" –∫–æ–¥, –≤—Å–µ –ø—Ä–æ–º–∏—Å—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
async function parallelMakeSmoothie() {
  try {
    console.time('parallelMakeSmoothie');
    const apple = getFruit('apple');
    const kiwi = getFruit('kiwi');
    const strawberry = getFruit('strawberry');
    const fruits = await Promise.all([apple, kiwi, strawberry]);
    console.log(fruits);
    console.timeEnd('parallelMakeSmoothie');
  } catch (error) {console.log(error);}
}
parallelMakeSmoothie();
